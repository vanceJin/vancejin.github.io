<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
#Asp.net夜话之一：asp.net介绍
##知识点：
XHTML语言
静态网页
动态网页
WEB服务器
Asp.net开发的预备知识

##内容
###静态网页
早期的网页都是使用静态网页的，所谓的静态网页就是在网页中不包含有需要在服务器端执行的代码。比如一个含有JavaScript特效的HTML网页或一个含有flash的HTML网页，它们虽然在网页呈现的效果会“动”，甚至还有运行代码，但是都是在客户端执行的代码，因而算不上动态页面。   
静态网页的好处是服务器只需要简单地将网页HTML创送给浏览器就行了。静态的缺点是维护起来困难，不能使用数据库带来的好处。   

###动态网页
动态网页是网页中包含有需要在Web服务器执行的代码。当我们向Web服务器请求一个动态网页的时候，对于页面的HTML代码部分，Web服务器直接传送给浏览器了，而对于需要在Web服务器执行的代码，自然是Web服务器执行该部分代码并将最终的执行结果也就是HTML代码传送给浏览器，因为浏览器不认识动态代码。也就是不论以何种语言编写的动态网页，到达浏览器的时候都是HTML代码。   
当然不同的编程语言编写的动态网页，Web服务器会以不同的方式运行这些代码，更专业一点的说法是Web服务器会交给不同的程序去执行这些代码，这些执行代码的程序我们称之为脚本引擎。Web服务器将这些脚本引擎的执行结果发送给浏览器。目前常见的动态网页jsp、asp、PHP及asp.net等。   

###Web服务器
Web服务器是用来接受客户浏览器请求的，根据客户端浏览器请求决定如何显示网页内容。当我们打开一个网页或者其它文件时，Web服务器会设置决定如何将该文件的内容交给客户端。   
目前比较流行的Web服务器有IIS（Internet Information Server）和Apache。前者是微软开发的，具有微软一贯的使用简单的特点，它运行Windows操作系统上，而Apache是一个开源软件，有Windows和Linux等系统下版本。我们做asp.net开发主要是使用IIS。   

#Asp.net夜话之二：asp.net内置对象

##知识点：   
Request   
Response   
Server   
Session   
Cookie   
Application   
<%%>及<%=%>表达式   

##内容
###Request
Request封装了客户端请求信息。Request的常见属性如下：
![](https://ooo.0o0.ooo/2017/05/05/590ca0ff42d96.jpg)

###Response
Response代表了服务器响应对象。每次客户端发出一个请求的时候，服务器就会用一个响应对象来处理这个请求，处理完这个请求之后，服务器就会销毁这个相应对象，以便继续接受其它客服端请求。   
Response常用属性如下：    
![2017-05-06_000929.jpg](https://ooo.0o0.ooo/2017/05/06/590ca3cdeb5e1.jpg)
Response常用方法   
![2017-05-06_001048.jpg](https://ooo.0o0.ooo/2017/05/06/590ca41d07c2a.jpg)

###Server
Server对象是用于获取服务器的相关信息的对象。它常用方法如下：

![2017-05-06_001646.jpg](https://ooo.0o0.ooo/2017/05/06/590ca587d20de.jpg)

前面我们提到，在HTTP中，服务器与客户端并不是时时保持连接状态，而是服务器被动地等待客户发送请求，服务器才进行响应。因此，在大部分情况下，服务器并不会管客户端是否还依然存在。   
在这种情况下，假如用户通过访问一些需要权限的页面，在他输入正确的用户名和密码之后第一次他访问a页面，隔几分钟之后再访问同样需要权限才能访问的b页面，这是他还需要输入用户名和密码吗？按照清理来说如果这个时间间隔比较短，我们不应该要求频繁用户输入这些信息，可是服务器又不记录这些信息，我们有没有办法解决这个问题呢？  
答案是有的，就是利用Session或者Cookie。   

###Session
Session对象用来保存与特定用户相关的信息，Session中的数据保存在服务器端，在客户端需要的时候创建Session，在客户端不需要的时候销毁Session，使它不再占用服务器内存。   
Session具有以下特点：   
Session中的数据保存在服务器端；   
Session中可以保存任意类型的数据；   
Session默认的生命周期是20分钟，可以手动设置更长或更短的时间。   

###Cookie
Cookie对象和Session对象一样也是用来保存特定的用户相关的数据，不过Session不同的是Cookie保存在客户端而不是服务器上，每次客户端发出请求的时候都会把Cookie一起发送到服务器，服务器每次响应客户端请求的时候会重新把Cookie发送到客户端保存。   

Cookie保存数据有以下特点：   
Cookie中的数据保存在客户端；   
Cookie中只能保存字符串类型的数据，如果需要在Cookie中保存其它类型数据，需要将其转换成字符串类型后保存；   
Cookie也有其默认生命周期，也可以手动设置，最大可设置成50年之后过期。   

###Application
Application和Session存储的数据类型和存储位置一样，都是存放Object类型的数据（也就是任意类型），并且存放在服务器上，不同的Application中的数据可以由网站中所有的用户来设置或者获取。并且Application中存放的数据没有时间限制，除非我们手动删除或者服务器重新启动，否则存放的数据都会丢失。

下面是Session、Cookie和Application的区别：
![2017-05-06_094149.jpg](https://ooo.0o0.ooo/2017/05/06/590d29f72b418.jpg)

###<%%>表达式
<%%>用来编写程序的代码部分。在其中可以声明变量和方法。

###<%=%>表达式
<%=%>是用来向输出流中输出变量的值。

<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<h1 id="aspnetaspnet">Asp.net夜话之一：asp.net介绍</h1>

<h2 id="">知识点：</h2>

<p>XHTML语言
静态网页
动态网页
WEB服务器
Asp.net开发的预备知识</p>

<h2 id="">内容</h2>

<h3 id="">静态网页</h3>

<p>早期的网页都是使用静态网页的，所谓的静态网页就是在网页中不包含有需要在服务器端执行的代码。比如一个含有JavaScript特效的HTML网页或一个含有flash的HTML网页，它们虽然在网页呈现的效果会“动”，甚至还有运行代码，但是都是在客户端执行的代码，因而算不上动态页面。 <br>
静态网页的好处是服务器只需要简单地将网页HTML创送给浏览器就行了。静态的缺点是维护起来困难，不能使用数据库带来的好处。   </p>

<h3 id="">动态网页</h3>

<p>动态网页是网页中包含有需要在Web服务器执行的代码。当我们向Web服务器请求一个动态网页的时候，对于页面的HTML代码部分，Web服务器直接传送给浏览器了，而对于需要在Web服务器执行的代码，自然是Web服务器执行该部分代码并将最终的执行结果也就是HTML代码传送给浏览器，因为浏览器不认识动态代码。也就是不论以何种语言编写的动态网页，到达浏览器的时候都是HTML代码。 <br>
当然不同的编程语言编写的动态网页，Web服务器会以不同的方式运行这些代码，更专业一点的说法是Web服务器会交给不同的程序去执行这些代码，这些执行代码的程序我们称之为脚本引擎。Web服务器将这些脚本引擎的执行结果发送给浏览器。目前常见的动态网页jsp、asp、PHP及asp.net等。   </p>

<h3 id="web">Web服务器</h3>

<p>Web服务器是用来接受客户浏览器请求的，根据客户端浏览器请求决定如何显示网页内容。当我们打开一个网页或者其它文件时，Web服务器会设置决定如何将该文件的内容交给客户端。 <br>
目前比较流行的Web服务器有IIS（Internet Information Server）和Apache。前者是微软开发的，具有微软一贯的使用简单的特点，它运行Windows操作系统上，而Apache是一个开源软件，有Windows和Linux等系统下版本。我们做asp.net开发主要是使用IIS。   </p>

<h1 id="aspnetaspnet">Asp.net夜话之二：asp.net内置对象</h1>

<h2 id="">知识点：</h2>

<p>Request <br>
Response <br>
Server <br>
Session <br>
Cookie <br>
Application <br>
&lt;%%&gt;及&lt;%=%&gt;表达式   </p>

<h2 id="">内容</h2>

<h3 id="request">Request</h3>

<p>Request封装了客户端请求信息。Request的常见属性如下：
<img src="https://ooo.0o0.ooo/2017/05/05/590ca0ff42d96.jpg" alt="" title=""></p>

<h3 id="response">Response</h3>

<p>Response代表了服务器响应对象。每次客户端发出一个请求的时候，服务器就会用一个响应对象来处理这个请求，处理完这个请求之后，服务器就会销毁这个相应对象，以便继续接受其它客服端请求。 <br>
Response常用属性如下： <br>
<img src="https://ooo.0o0.ooo/2017/05/06/590ca3cdeb5e1.jpg" alt="2017-05-06<em>000929.jpg" title="">
Response常用方法 <br>
<img src="https://ooo.0o0.ooo/2017/05/06/590ca41d07c2a.jpg" alt="2017-05-06</em>001048.jpg" title=""></p>

<h3 id="server">Server</h3>

<p>Server对象是用于获取服务器的相关信息的对象。它常用方法如下：</p>

<p><img src="https://ooo.0o0.ooo/2017/05/06/590ca587d20de.jpg" alt="2017-05-06_001646.jpg" title=""></p>

<p>前面我们提到，在HTTP中，服务器与客户端并不是时时保持连接状态，而是服务器被动地等待客户发送请求，服务器才进行响应。因此，在大部分情况下，服务器并不会管客户端是否还依然存在。 <br>
在这种情况下，假如用户通过访问一些需要权限的页面，在他输入正确的用户名和密码之后第一次他访问a页面，隔几分钟之后再访问同样需要权限才能访问的b页面，这是他还需要输入用户名和密码吗？按照清理来说如果这个时间间隔比较短，我们不应该要求频繁用户输入这些信息，可是服务器又不记录这些信息，我们有没有办法解决这个问题呢？ <br>
答案是有的，就是利用Session或者Cookie。   </p>

<h3 id="session">Session</h3>

<p>Session对象用来保存与特定用户相关的信息，Session中的数据保存在服务器端，在客户端需要的时候创建Session，在客户端不需要的时候销毁Session，使它不再占用服务器内存。 <br>
Session具有以下特点： <br>
Session中的数据保存在服务器端； <br>
Session中可以保存任意类型的数据； <br>
Session默认的生命周期是20分钟，可以手动设置更长或更短的时间。   </p>

<h3 id="cookie">Cookie</h3>

<p>Cookie对象和Session对象一样也是用来保存特定的用户相关的数据，不过Session不同的是Cookie保存在客户端而不是服务器上，每次客户端发出请求的时候都会把Cookie一起发送到服务器，服务器每次响应客户端请求的时候会重新把Cookie发送到客户端保存。   </p>

<p>Cookie保存数据有以下特点： <br>
Cookie中的数据保存在客户端； <br>
Cookie中只能保存字符串类型的数据，如果需要在Cookie中保存其它类型数据，需要将其转换成字符串类型后保存； <br>
Cookie也有其默认生命周期，也可以手动设置，最大可设置成50年之后过期。   </p>

<h3 id="application">Application</h3>

<p>Application和Session存储的数据类型和存储位置一样，都是存放Object类型的数据（也就是任意类型），并且存放在服务器上，不同的Application中的数据可以由网站中所有的用户来设置或者获取。并且Application中存放的数据没有时间限制，除非我们手动删除或者服务器重新启动，否则存放的数据都会丢失。</p>

<p>下面是Session、Cookie和Application的区别：
<img src="https://ooo.0o0.ooo/2017/05/06/590d29f72b418.jpg" alt="2017-05-06_094149.jpg" title=""></p>

<h3 id="">&lt;%%&gt;表达式</h3>

<p>&lt;%%&gt;用来编写程序的代码部分。在其中可以声明变量和方法。</p>

<h3 id="">&lt;%=%&gt;表达式</h3>

<p>&lt;%=%&gt;是用来向输出流中输出变量的值。</p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2014 by isnowfy, Designed by isnowfy</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "2017050501.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
