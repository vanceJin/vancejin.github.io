<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
##知识点：   
Request   
Response   
Server   
Session   
Cookie   
Application   
<%%>及<%=%>表达式   

##内容
###Request
Request封装了客户端请求信息。Request的常见属性如下：
![](https://ooo.0o0.ooo/2017/05/05/590ca0ff42d96.jpg)

###Response
Response代表了服务器响应对象。每次客户端发出一个请求的时候，服务器就会用一个响应对象来处理这个请求，处理完这个请求之后，服务器就会销毁这个相应对象，以便继续接受其它客服端请求。   
Response常用属性如下：    
![2017-05-06_000929.jpg](https://ooo.0o0.ooo/2017/05/06/590ca3cdeb5e1.jpg)
Response常用方法   
![2017-05-06_001048.jpg](https://ooo.0o0.ooo/2017/05/06/590ca41d07c2a.jpg)

###Server
Server对象是用于获取服务器的相关信息的对象。它常用方法如下：

![2017-05-06_001646.jpg](https://ooo.0o0.ooo/2017/05/06/590ca587d20de.jpg)

前面我们提到，在HTTP中，服务器与客户端并不是时时保持连接状态，而是服务器被动地等待客户发送请求，服务器才进行响应。因此，在大部分情况下，服务器并不会管客户端是否还依然存在。   
在这种情况下，假如用户通过访问一些需要权限的页面，在他输入正确的用户名和密码之后第一次他访问a页面，隔几分钟之后再访问同样需要权限才能访问的b页面，这是他还需要输入用户名和密码吗？按照清理来说如果这个时间间隔比较短，我们不应该要求频繁用户输入这些信息，可是服务器又不记录这些信息，我们有没有办法解决这个问题呢？  
答案是有的，就是利用Session或者Cookie。   

###Session
Session对象用来保存与特定用户相关的信息，Session中的数据保存在服务器端，在客户端需要的时候创建Session，在客户端不需要的时候销毁Session，使它不再占用服务器内存。   





<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<h2 id="">知识点：</h2>

<p>Request <br>
Response <br>
Server <br>
Session <br>
Cookie <br>
Application <br>
&lt;%%&gt;及&lt;%=%&gt;表达式   </p>

<h2 id="">内容</h2>

<h3 id="request">Request</h3>

<p>Request封装了客户端请求信息。Request的常见属性如下：
<img src="https://ooo.0o0.ooo/2017/05/05/590ca0ff42d96.jpg" alt="" title=""></p>

<h3 id="response">Response</h3>

<p>Response代表了服务器响应对象。每次客户端发出一个请求的时候，服务器就会用一个响应对象来处理这个请求，处理完这个请求之后，服务器就会销毁这个相应对象，以便继续接受其它客服端请求。 <br>
Response常用属性如下： <br>
<img src="https://ooo.0o0.ooo/2017/05/06/590ca3cdeb5e1.jpg" alt="2017-05-06<em>000929.jpg" title="">
Response常用方法 <br>
<img src="https://ooo.0o0.ooo/2017/05/06/590ca41d07c2a.jpg" alt="2017-05-06</em>001048.jpg" title=""></p>

<h3 id="server">Server</h3>

<p>Server对象是用于获取服务器的相关信息的对象。它常用方法如下：</p>

<p><img src="https://ooo.0o0.ooo/2017/05/06/590ca587d20de.jpg" alt="2017-05-06_001646.jpg" title=""></p>

<p>前面我们提到，在HTTP中，服务器与客户端并不是时时保持连接状态，而是服务器被动地等待客户发送请求，服务器才进行响应。因此，在大部分情况下，服务器并不会管客户端是否还依然存在。 <br>
在这种情况下，假如用户通过访问一些需要权限的页面，在他输入正确的用户名和密码之后第一次他访问a页面，隔几分钟之后再访问同样需要权限才能访问的b页面，这是他还需要输入用户名和密码吗？按照清理来说如果这个时间间隔比较短，我们不应该要求频繁用户输入这些信息，可是服务器又不记录这些信息，我们有没有办法解决这个问题呢？ <br>
答案是有的，就是利用Session或者Cookie。   </p>

<h3 id="session">Session</h3>

<p>Session对象用来保存与特定用户相关的信息，Session中的数据保存在服务器端，在客户端需要的时候创建Session，在客户端不需要的时候销毁Session，使它不再占用服务器内存。   </p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2014 by isnowfy, Designed by isnowfy</p>
	</div>
</div>
<script src="main.js"></script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "2017050501.htm";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
</body>
</html>
